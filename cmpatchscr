#!/bin/bash

# Namespace and ConfigMap name
NAMESPACE="kube-system"
CONFIGMAP="ama-metrics-settings-configmap"

# Get current values and handle if they are missing
current_scrape=$(kubectl get configmap $CONFIGMAP -n $NAMESPACE -o jsonpath='{.data.default-scrape-settings-enabled}' 2>/dev/null || echo "")
current_keep=$(kubectl get configmap $CONFIGMAP -n $NAMESPACE -o jsonpath='{.data.default-targets-metrics-keep-list}' 2>/dev/null || echo "")

# Remove any trailing newlines or whitespace
current_scrape=$(echo -e "$current_scrape" | sed '/^\s*$/d')
current_keep=$(echo -e "$current_keep" | sed '/^\s*$/d')

# New lines to add
new_scrape="controlplane-node-auto-provisioning = false"
new_keep='controlplane-node-auto-provisioning = ""'

# Append new lines only if not present
if [[ -n "$current_scrape" && ! "$current_scrape" =~ "$new_scrape" ]]; then
  printf -v updated_scrape "%b\n%b" "$current_scrape" "$new_scrape"
else
  updated_scrape="${current_scrape:-$new_scrape}"
  [[ -z "$updated_scrape" ]] && updated_scrape="$new_scrape"
fi
if [[ -n "$current_keep" && ! "$current_keep" =~ "$new_keep" ]]; then
  printf -v updated_keep "%b\n%b" "$current_keep" "$new_keep"
else
  updated_keep="${current_keep:-$new_keep}"
  [[ -z "$updated_keep" ]] && updated_keep="$new_keep"
fi

# Apply the patch with escaped quotes for JSON
kubectl patch configmap $CONFIGMAP -n $NAMESPACE --type merge -p "{\"data\":{\"default-scrape-settings-enabled\":\"$(echo -e "$updated_scrape")\",\"default-targets-metrics-keep-list\":\"$(echo -e "$updated_keep")\"}}"

echo "Patch applied. Check the ConfigMap with: kubectl get configmap $CONFIGMAP -n $NAMESPACE -o yaml"
