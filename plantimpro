@startuml
' Force vertical layout
top to bottom direction

' Skin parameters for styling
skinparam monochrome false
skinparam defaultFontSize 12
skinparam componentStyle rectangle
skinparam component {
  BackgroundColor<<aks>> #0078D4
  BorderColor<<aks>> #005BA1
  FontColor<<aks>> #FFFFFF
  BackgroundColor<<karpenter>> #00A170
  BorderColor<<karpenter>> #006D4E
  FontColor<<karpenter>> #FFFFFF
  BackgroundColor<<azure>> #32C8CD
  BorderColor<<azure>> #1A8A8F
  FontColor<<azure>> #FFFFFF
  BackgroundColor<<pod>> #FFD700
  BorderColor<<pod>> #DAA520
  BackgroundColor<<node>> #98FB98
  BorderColor<<node>> #228B22
  BackgroundColor<<kyverno>> #FF6347
  BorderColor<<kyverno>> #CC4C33
  FontColor<<kyverno>> #FFFFFF
}

' Components (stacked vertically downwards)
[Azure Voting App] as workload
[Kyverno Policy Engine] as kyverno <<kyverno>>

package "Karpenter NAP" <<karpenter>> {
  [Karpenter Controller] as controller <<karpenter>>
  [NodePool: Spot] as np_spot <<karpenter>>
  [NodePool: High-Perf] as np_hp <<karpenter>>
  [NodePool: Logging] as np_log <<karpenter>>
}

package "AKS Cluster" <<aks>> {
  package "Zone 1" {
    [Pod: Spot, 2 CPU, 4GB] as pod_spot1 <<pod>>
    [Spot Node: Standard_D4ls_v5] as spot_node1 <<node>>
  }
  package "Zone 2" {
    [Pod: Spot, 2 CPU, 4GB] as pod_spot2 <<pod>>
    [Spot Node: Standard_D4ls_v5] as spot_node2 <<node>>
  }
  package "Zone 3" {
    [Pod: Spot, 2 CPU, 4GB] as pod_spot3 <<pod>>
    [Spot Node: Standard_D4ls_v5] as spot_node3 <<node>>
  }
  [Kube-Scheduler] as scheduler <<aks>>
  [System Node Pool] as system_node <<node>>
  [High-Perf Nodes: Standard_E2s_v5\n(Zones 1,2,3)] as hp_nodes <<node>>
  [Logging Nodes: Standard_D4s_v3\n(Zones 1,2,3)] as log_nodes <<node>>
}

package "Azure Cloud" <<azure>> {
  [Azure API: Virtual Machines] as azure_api <<azure>>
}

' Workflow (Spot: blue)
workload --> kyverno : 1. Deploy Pods (Spot)\nNamespace: workload=spot
' Spot workflow (blue)
kyverno -[#blue]-> pod_spot1 : 2. Mutate: Add Labels + Node Affinity (Spot)
kyverno -[#blue]-> pod_spot2 : 2. Mutate: Add Labels + Node Affinity (Spot)
kyverno -[#blue]-> pod_spot3 : 2. Mutate: Add Labels + Node Affinity (Spot)
pod_spot1 -[#blue]-> scheduler : 3. Resource Request with Topology Constraints (Spot)
pod_spot2 -[#blue]-> scheduler : 3. Resource Request with Topology Constraints (Spot)
pod_spot3 -[#blue]-> scheduler : 3. Resource Request with Topology Constraints (Spot)
scheduler -[#blue]-> pod_spot1 : 4. Unschedulable (Spot)
scheduler --> controller : 5. Detect Unschedulable
controller --> np_spot : 6. Evaluate Spot NodePool
controller --> azure_api : 7. Provision VMs (Spot: Zones 1,2,3)
azure_api -[#blue]-> spot_node1 : 8. Add Spot Node (Zone 1)
azure_api -[#blue]-> spot_node2 : 8. Add Spot Node (Zone 2)
azure_api -[#blue]-> spot_node3 : 8. Add Spot Node (Zone 3)
scheduler -[#blue]-> spot_node1 : 9. Schedule Spot Pod (Zone 1)
scheduler -[#blue]-> spot_node2 : 9. Schedule Spot Pod (Zone 2)
scheduler -[#blue]-> spot_node3 : 9. Schedule Spot Pod (Zone 3)
controller --> np_hp : 10. Provision High-Perf Nodes (Zones 1,2,3)
azure_api --> hp_nodes : 11. Add High-Perf Nodes
controller --> np_log : 12. Provision Logging Nodes (Zones 1,2,3)
azure_api --> log_nodes : 13. Add Logging Nodes
controller --> system_node : 14. Consolidate (WhenEmpty, 30s)

' Annotations
note right of workload
  Deployment Spec:
  - Namespace: workload=spot
  - Toleration: karpenter.sh/disruption:NoSchedule
  - TopologySpreadConstraints:
    - maxSkew: 1
    - topologyKey: topology.kubernetes.io/zone
    - whenUnsatisfiable: ScheduleAnyway
    - labelSelector: app=azure-voting-app
end note

note right of kyverno
  Kyverno Mutate Policy:
  - Adds required labels (e.g., app: azure-voting-app, env: prod)
  - Injects Node Affinity:
    - Spot: nodeSelector (instance-type: Standard_D4ls_v5)
    - High-Perf: nodeSelector (instance-type: Standard_E2s_v5)
    - Logging: nodeSelector (instance-type: Standard_D4s_v3)
end note

note right of controller
  Managed NAP (Preview)
  Azure CNI Cilium (Overlay)
  Spot VMs Supported
  No Windows Node Pools
  Requires aks-preview CLI
  Distributes nodes across zones: zone-1, zone-2, zone-3
end note

note right of np_spot
  NodePool: Spot
  limits: {cpu: 1000, memory: 1000Gi}
  consolidationPolicy: WhenEmpty
  consolidateAfter: 30s
  instanceTypes: [D4ls_v5]
  tolerations: karpenter.sh/disruption:NoSchedule
  zones: [zone-1, zone-2, zone-3]
end note

note right of np_hp
  NodePool: High-Perf
  instanceTypes: [E2s_v5]
  zones: [zone-1, zone-2, zone-3]
end note

note right of np_log
  NodePool: Logging
  instanceTypes: [D4s_v3]
  zones: [zone-1, zone-2, zone-3]
end note

@enduml
